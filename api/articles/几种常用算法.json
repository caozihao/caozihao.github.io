{"title":"几种常用算法","slug":"几种常用算法","date":"2018-12-25T14:06:15.000Z","updated":"2018-12-26T12:56:27.137Z","comments":true,"excerpt":"","content":"<h4 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h4><pre><code>for(let i = 0; i &lt; arr.length - 1;i++){\n    for(let j=0;j &lt; arr.length-i-1;j++){\n        if(arr[j] &gt; arr[j+1]){\n            let temp = arr[j];\n            arr[j] = arr[j+1];\n            arr[j+1] = temp;\n        }\n    }\n}\nreturn arr;\n</code></pre><h4 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h4><pre><code>const chooseSort = (arr)=&gt;{\n    for(let i =0;i &lt; arr.length-1;i++){\n        let minIndex = i;\n        for(let j = i+1;j&lt;arr.length;j++){\n            if(arr[j] &lt; arr[minIndex]){\n                minIndex = j;\n            }\n        }\n        if(minIndex !== i){\n            let temp =  arr[i];\n            arr[i] = arr[minIndex];\n            arr[minIndex] = temp; \n        }\n\n    }\n    return arr;\n}\n</code></pre><h4 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h4><pre><code>const insertSort = (arr)=&gt;{\n    for(let i =1;i &lt; arr.length;i++){\n        let temp  = arr[i];\n        let leftIndex = i -1;\n        while(leftIndex &gt;=0 &amp;&amp; arr[leftIndex] &gt; temp){\n            arr[leftIndex + 1] = arr[leftIndex];\n            leftIndex --;\n        }\n        arr[leftIndex + 1] = temp;\n    }\n    return arr;\n\n}\n</code></pre><h4 id=\"快速排序（填坑法）\"><a href=\"#快速排序（填坑法）\" class=\"headerlink\" title=\"快速排序（填坑法）\"></a>快速排序（填坑法）</h4><pre><code>const quickSort1 = (arr)=&gt;{\n    const sort = (arr,startIndex,endIndex)=&gt;{\n    //         递归结束条件：startIndex &gt; endIndex\n            if(startIndex &gt;= endIndex){\n                return;\n            }\n    //         得到基准元素位置\n            let pivotIndex = partition(arr,startIndex,endIndex);\n    //         用分治法递归数列的两部分\n            sort(arr,startIndex,pivotIndex-1); \n            sort(arr,pivotIndex+1,endIndex); \n        }\n\n        const partition = (arr,startIndex,endIndex)=&gt;{\n    //         取第一个元素作为基准值\n            let pivot = arr[startIndex];\n            let left = startIndex;\n            let right = endIndex;\n    //         坑的位置，初始等于pivot的位置\n            let index = startIndex;\n    //         大循环在左右指针重合或者交错时结束\n            while(right &gt;= left){\n    //             right指针从右向左进行比较\n                while(right &gt;=left){\n    //                 不满足条件就交换\n                    if(arr[right] &lt; pivot){\n                        arr[left] = arr[right]\n                        index = right;\n                        left ++;\n                        break;\n                    }else{\n                        right --;\n                    }\n                }\n    //             left指针从左向右进行比较\n                while(right &gt;= left){\n                    if(arr[left] &gt; pivot){\n                        arr[right] = arr[left]\n                        index = left;\n                        right --;\n                        break;\n                    } else{\n                        left ++;\n                    }\n\n                }\n            }\n            arr[index] = pivot;\n            return index;\n        }\n\n        sort(arr,0,arr.length-1);\n        return arr;\n    }\n</code></pre><h4 id=\"快速排序（指针交换法）\"><a href=\"#快速排序（指针交换法）\" class=\"headerlink\" title=\"快速排序（指针交换法）\"></a>快速排序（指针交换法）</h4><pre><code>  const quickSort2 = (arr)=&gt;{\n    const sort = (arr,startIndex,endIndex)=&gt;{\n        if(startIndex &gt;= endIndex){\n            return;\n        }\n        const partPosition = getPosition(arr,startIndex,endIndex);\n        sort(arr,startIndex,partPosition-1);\n        sort(arr,partPosition+1,endIndex);\n    }\n\n    const getPosition = (arr,startIndex,endIndex)=&gt;{\n        let pivot = arr[startIndex];\n        let left = startIndex;\n        let right = endIndex;\n\n        while(right &gt; left){\n//             满足条件就继续\n            while (right &gt;left  &amp;&amp; arr[right] &gt; pivot){\n                right --;\n            }\n\n          while (right &gt;left &amp;&amp; arr[left] &lt;= pivot){\n                left ++;\n            }\n          if(left &lt; right){\n            let temp = arr[left];\n            arr[left] = arr[right];\n            arr[right] =  temp \n            }\n\n        }\n\n        let temp = arr[left];\n        arr[left] = arr[startIndex];\n        arr[startIndex] =  temp;\n        return left;\n    }\n\n    sort(arr,0,arr.length-1);\n    return arr;\n}\n</code></pre><h4 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h4><pre><code>// const data = [7, 6, 9, 8, 5,1];\nconst data = [7, 6, 9, 8, 5,11,14,58,32,12,41,99,65,61,18,27,34,1,2];\n  // console.log(bubbleSort([...data]));\n  // console.log(chooseSort([...data]));\n  // console.log(insertSort([...data]));\n  console.log(quickSort1([...data]));\n</code></pre>","thumbnail":"/images/算法/bg.jpg","categories":[],"tags":[{"name":"算法","path":"api/tags/算法.json"}]}